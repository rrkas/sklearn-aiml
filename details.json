{
    "Root Mean Square Error (RMSE)": {
        "formula": "RMSE(X,h) = sqrt((1/m) * sum(i=1..m, pow(h(xi)-yi, 2)))",
        "notations": {
            "RMSE(X,h)":"cost function measured on the set of examples using your hypothesis h",
            "X": [
                "matrix containing all the feature values (excluding labels) of all instances in the dataset",
                "There is one row per instance and the ith row is equal to the transpose of x(i), noted (x(i))T"
            ],
            "h": "system's prediction function, also called a hypothesis",
            "m": "number of instances in the dataset",
            "xi": "vector of all the feature values (excluding the label) of the ith instance in the dataset",
            "yi": "label (the desired output value for that instance)"
        },
        "notes":[
            "follows Euclidian norm"
        ]
    },
    "Mean Absolute Error (MAE)":{
        "formula": "MAE(X,h) = (1/m) * sum(i=1..m, abs(h(xi)-yi))",
        "notations": {
            "MAE(X,h)":"cost function measured on the set of examples using your hypothesis h",
            "X": [
                "matrix containing all the feature values (excluding labels) of all instances in the dataset",
                "There is one row per instance and the ith row is equal to the transpose of x(i), noted (x(i))T"
            ],
            "h": "system's prediction function, also called a hypothesis",
            "m": "number of instances in the dataset",
            "xi": "vector of all the feature values (excluding the label) of the ith instance in the dataset",
            "yi": "label (the desired output value for that instance)"
        },
        "notes":[
            "follows Manhattan norm"
        ]
    },
    "Scikit-Learn Design":{
        "Consistency":{
            "Estimators": [
                "Any object that can estimate some parameters based on a dataset is called an estimator",
                "The estimation itself is performed by the fit() method, and it takes only a dataset as a parameter",
                "Any other parameter needed to guide the estimation process is considered a hyperparameter (such as an imputer's strategy), and it must be set as an instance variable"
            ],
            "Transformers": [
                "Some estimators (such as an imputer) can also transform a dataset; these are called transformers",
                "transformation is performed by the transform() method with the dataset to transform as a parameter"
            ],
            "Predictors": [
                "some estimators are capable of making predictions given a dataset; they are called predictors",
                "A predictor has a predict() method that takes a dataset of new instances and returns a dataset of corresponding predictions",
                "It also has a score() method that measures the quality of the predictions given a test set"
            ]
        },
        "Inspection": [
            "All the estimator's hyperparameters are accessible directly via public instance variables (e.g., imputer.strategy)",
            "and all the estimator's learned parameters are also accessible via public instance variables with an underscore suffix (e.g., imputer.statistics_)"
        ],
        "Nonproliferation of classes": [
            "Datasets are represented as NumPy arrays or SciPy sparse matrices, instead of homemade classes",
            "Hyperparameters are just regular Python strings or numbers."
        ],
        "Composition": "Existing building blocks are reused as much as possible",
        "Sensible defaults":"Scikit-Learn provides reasonable default values for most parameters, making it easy to create a baseline working system quickly"
    }
}